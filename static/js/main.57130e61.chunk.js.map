{"version":3,"sources":["component/utils/classNames.ts","component/nav/Navbar.tsx","component/layout/Main.tsx","component/sections/Hero.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["classNames","classes","filter","Boolean","join","navigation","name","href","current","NavBar","as","className","open","Button","src","alt","map","item","undefined","Panel","Main","children","Fragment","Hero","target","rel","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57130e61.chunk.js","sourcesContent":["export function classNames(...classes:any) {\r\n  return classes.filter(Boolean).join(' ');\r\n}","import { Disclosure } from '@headlessui/react'\r\nimport { BeakerIcon, MenuIcon, XIcon } from '@heroicons/react/outline'\r\nimport { classNames } from '../utils/classNames';\r\n\r\nconst navigation = [\r\n  { name: 'Inicio', href: '/', current: true },\r\n  { name: 'Proyectos', href: '/proyectos', current: false },\r\n  { name: 'Habilidades', href: '/habilidades', current: false },\r\n  { name: 'Testimonios', href: '/testimonios', current: false },\r\n  { name: 'Contacto', href: '/contacto', current: false },\r\n];\r\n\r\nexport default function NavBar() {\r\n  return (\r\n    <Disclosure as=\"nav\" className=\"z-40 bg-gray-900\">\r\n      {({ open }) => (\r\n        <>\r\n          <div className=\"max-w-7xl mx-auto px-2 sm:px-6 lg:px-8\">\r\n            <div className=\"relative flex items-center justify-between h-16\">\r\n              <div className=\"absolute inset-y-0 left-0 flex items-center sm:hidden\">\r\n                {/* Mobile menu button*/}\r\n                <Disclosure.Button className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\">\r\n                  <span className=\"sr-only\">Open main menu</span>\r\n                  {open ? (\r\n                    <XIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\r\n                  ) : (\r\n                    <MenuIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\r\n                  )}\r\n                </Disclosure.Button>\r\n              </div>\r\n              <div className=\"flex-1 flex items-center justify-center sm:items-stretch sm:justify-start\">\r\n                <div className=\"flex-shrink-0 flex items-center\">\r\n                  <img\r\n                    className=\"block lg:hidden h-8 w-auto\"\r\n                    src=\"https://tailwindui.com/img/logos/workflow-mark-indigo-500.svg\"\r\n                    alt=\"Workflow\"\r\n                  />\r\n                  <img\r\n                    className=\"hidden lg:block h-8 w-auto\"\r\n                    src=\"https://tailwindui.com/img/logos/workflow-mark-indigo-500.svg\"\r\n                    alt=\"Workflow\"\r\n                  />\r\n                  \r\n                </div>\r\n                <div className=\"hidden sm:block sm:ml-6\">\r\n                  <div className=\"flex space-x-4\">\r\n                    {navigation.map((item) => (\r\n                      <a\r\n                        key={item.name}\r\n                        href={item.href}\r\n                        className={classNames(\r\n                          item.current\r\n                          ? 'bg-gray-900 text-white'\r\n                          : 'text-gray-300 hover:bg-gray-700 hover:text-white',\r\n                          'px-3 py-2 rounded-md text-sm font-medium'\r\n\r\n                        )}\r\n                        aria-current={item.current ? 'page' : undefined}\r\n                      >\r\n                        {item.name}\r\n                      </a>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0\">\r\n                <button className=\"bg-gray-800 p-1 rounded-full text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\">\r\n                  <span className=\"sr-only\">View notifications</span>\r\n                  <BeakerIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <Disclosure.Panel className=\"sm:hidden\">\r\n            <div className=\"px-2 pt-2 pb-3 space-y-1\">\r\n              {navigation.map((item) => (\r\n                <a\r\n                  key={item.name}\r\n                  href={item.href}\r\n                  className={classNames(\r\n                    item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white', 'block px-3 py-2 rounded-md text-base font-medium'\r\n                  )}\r\n                  aria-current={item.current ? 'page' : undefined}\r\n                >\r\n                  {item.name}\r\n                </a>\r\n              ))}\r\n            </div>\r\n          </Disclosure.Panel>\r\n        </>\r\n      )}\r\n    </Disclosure>\r\n  )\r\n}\r\n","import React, { ReactNode } from 'react';\r\nimport Navbar from '../nav/Navbar';\r\n\r\nconst Main = ({ children }: { children: ReactNode }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Navbar />\r\n      <main>\r\n        { children }\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","export default function Hero() {\r\n  return (\r\n    <div className=\"bg-white dark:bg-gray-900 overflow-hidden\">\r\n      <div className=\"pt-16 pb-80 sm:pt-24 sm:pb-40 lg:pt-40 lg:pb-48\">\r\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 sm:static\">\r\n          <span className=\"px-2 inline-flex text-2xl text-gray-900 font font-medium rounded-md bg-green-300\">\r\n            Hola\r\n          </span>\r\n          <div className=\"sm:max-w-lg\">\r\n            <h1 className=\"text-4xl font font-extrabold tracking-tight text-gray-900 dark:text-white sm:text-6xl\">\r\n              Soy CraterMaik\r\n            </h1>\r\n            <p className=\"mt-4 text-xl text-gray-500 dark:text-gray-300\">\r\n              Freelance Web, Founder of <a className=\"text-pink-400 hover:text-pink-500\" href=\"https://portalmybot.com\" target=\"_blank\" rel=\"noopener noreferrer\">portalmybot.com</a>, Full Stack Developer.\r\n            </p>\r\n            \r\n          </div>\r\n          <div>\r\n            <div className=\"mt-10\">\r\n            \r\n              <a\r\n                href=\"/discord\"\r\n                className=\"inline-block text-center bg-gradient-to-r from-green-400 to-blue-500 rounded-md py-3 px-8 font-medium text-white hover:from-blue-400 hover:to-green-400\"\r\n              >\r\n                Contactar\r\n              </a>\r\n              <a\r\n                href=\"/proyectos\"\r\n                className=\"inline-block text-center ml-2 bg-pink-500 rounded-md py-3 px-8 font-medium text-white hover:bg-pink-700\"\r\n              >\r\n                Proyectos\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import LayoutMain from './component/layout/Main';\nimport Hero from './component/sections/Hero';\n\nfunction App() {\n  return (\n    <LayoutMain>\n      <Hero />\n    </LayoutMain>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}